// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  refresh_token_expires_in Int?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  user                User           @relation(fields: [userId, userName], references: [id, name], onDelete: Cascade)
  userId              String         @db.ObjectId
  userName            String         @unique
  connectedToCalendar Boolean?
  role                String?
  schoolCreated       School[]
  school              SchoolOnUser[]
  remember            Remember[]
  event               Event[]
  report              Report[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@unique([id, userName])
  @@unique([userId, userName])
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?         @unique
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@unique([name, id])
  @@unique([id, name])
  @@map("users")
}

model SchoolOnUser {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  schoolName String
  shifts     String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([credentialID])
}

model School {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String   @unique
  shift               String[]
  principal           String?
  coordinator_morning String?
  coordinator_evening String?
  coordinator_night   String?
  email               String?
  telephone           String?
  address             String?
  class               Class[]
  creator             Profile  @relation(fields: [creatorId], references: [id])
  creatorId           String   @db.ObjectId
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("schools")
}

model Class {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  students   Int
  theme      String
  school     School   @relation(fields: [schoolName], references: [name])
  schoolName String
  shift      String
  done       Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Remember {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  author     Profile  @relation(fields: [authorId, authorName], references: [id, userName], onDelete: Cascade)
  authorId   String   @db.ObjectId
  authorName String
  content    String
  schoolName String
  shift      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Event {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  subject         String
  location        String
  startTime       DateTime
  endTime         DateTime
  timeZone        String
  date            DateTime
  organizer       Profile  @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  organizerId     String   @db.ObjectId
  organizerSchool String
  googleEventId   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Report {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  author                Profile  @relation(fields: [authorName], references: [userName], onDelete: Cascade)
  authorName            String
  schoolName            String
  classAndShift         String
  theme                 String
  activitiesDone        String[]
  coworkers             Int
  resources             String[]
  assistedInChaplaincy  Int
  chaplaincyObservation String
  createdAt             DateTime @default(now())
}
