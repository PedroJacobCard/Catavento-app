// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  COORDENADOR_A_GERAL
  COORDENADOR_A
  SECRETARIO_A
  VOLUNTARIO_A
}

model User {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                String?         @unique
  email               String?         @unique
  emailVerified       DateTime?       @map("email_verified")
  image               String?
  connectedToCalender Boolean
  role                Role
  schoolCreated       School[]
  school              SchoolOnUser[]
  remember            Remember[]
  event               Event[]
  report              Report[]
  accounts            Account[]
  sessions            Session[]
  authenticator       Authenticator[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@unique([name, id])
  @@map("users")
}

model SchoolOnUser {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  schoolName String
  shifts     String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([credentialID])
}

model School {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  name                String     @unique
  shift               Shift[]
  principal           String?
  coordinator_morning String?
  coordinator_evening String?
  coordinator_night   String?
  email               String?    @unique
  telephone           String?
  address             String?
  class               Class[]
  remember            Remember[]
  event               Event[]
  report              Report[]
  creator             User       @relation(fields: [creatorId], references: [id])
  creatorId           String     @db.ObjectId
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@map("schools")
}

enum Shift {
  MATUTINO
  VESPERTINO
  NOTURNO
}

model Class {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  students   Int
  theme      Theme    @unique
  school     School   @relation(fields: [schoolName], references: [name])
  schoolName String
  shift      Shift
  done       Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Theme {
  RESPEITO
  HONESTIDADE
  SUPERACAO
  ESPERANCA
  GRATIDAO
  COMPAIXAO
  CORAGEM
  FE
  HUMILDADE
  RESPONSABILIDADE
  DOMINIO_PROPRIO
  AMOR
}

model Remember {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  author     User     @relation(fields: [authorId, authorName], references: [id, name], onDelete: Cascade)
  authorId   String   @db.ObjectId
  authorName String
  content    String
  school     School   @relation(fields: [schoolName], references: [name])
  schoolName String
  shift      Shift
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Event {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  subject         String
  location        String
  startTime       DateTime
  endTime         DateTime
  timeZone        String
  date            DateTime
  organizer       User     @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  organizerId     String   @db.ObjectId
  school          School   @relation(fields: [organizerSchool], references: [name])
  organizerSchool String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum Activities {
  RODA_DE_CONVERSA
  HISTORIA
  POST_IT
}

enum Resources {
  MATERIAL_DA_RODA_DE_CONVERSA
  PLACAS_DA_HISTORIA
  POST_IT
  IMA
}

model Report {
  id                    String       @id @default(auto()) @map("_id") @db.ObjectId
  author                User         @relation(fields: [authorName], references: [name], onDelete: Cascade)
  authorName            String
  school                School       @relation(fields: [schoolName], references: [name])
  schoolName            String
  classAndshift         String
  theme                 Theme
  activitiesDone        Activities[]
  coworkers             Int
  resources             Resources[]
  assistedInChaplaincy  Int
  chaplaincyObservation String
  createdAt             DateTime     @default(now())
}
